Strings
- Defined by "" and '', just like Python
- Need to assign them a variable, just like Python

Variables
- Uh, yeah, pretty much just like Python
- Every time you refresh the page your variables get reset
- You can use up and down arrows to autocomplete variables that exist/are defined in your current session
* Do you have to type "var" before a variable name to define it as a variable?

Functions & Libraries
- MDN has good documentation on Javascripts built-in libraries: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
- There are also a lot of third-party libraries (like underscore.js) that you can download and use for special Javascripty things
- Running a function on a variable doesn't change the variable itself UNLESS you do varName = function(varName)
- You can also make your own functions - yay! - to do so the syntax is:
function functionName(argumentOne) {
  return string + "!!!"
}
- Make sure your function returns something if you want it to print something out, otherwise it will do what you tell it but not actually print it out
- "Methods are just a name for a function when it belongs to something" e.g. toUppercase is just like .upper() in Python
- "return" is more generic than "console.log" so it's better to use the former in functions

Loops
- Here's some basic syntax for how to loop, but I think it might be specific ot Underscore.js
function logANumber(someNumber) {
  console.log(someNumber)
}
_.times(10, logANumber)

Arrays
- I am a broken record, but these are just like lists in Python
- Here's how you create one:
var MyFirstArray = ["thing one", "thing two", "thing three"]
- Add something to a list using .push() (myList.push("new list item")
- When you add an item to a list, the console will print out the length of the list - so helpful!

Objects
- UGH THESE ARE BASICALLY DICTIONARIES MY BRAIN WILL NEVER KEEP THIS ALL STRAIGHT
- Syntax is: var myObject = {name: "Chrissy", address: "next to big bear", age: "27 going on 62"}
- You call them this way: return myObject.name OR console.log(myObject.age)
- Objects don't remember the order of things, so if order matters use arrays
- You can make arrays filled with objects or objects filled with arrays or objects filled with objects, etc. etc. etc.
